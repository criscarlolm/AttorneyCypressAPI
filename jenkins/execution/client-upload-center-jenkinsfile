pipeline {

    agent none

    options {
        ansiColor('xterm')
    }

    stages {

        stage('Parallel Stage') {

            parallel {
                
                 stage("Execute Automation 1") {
                     agent {label "aut1"}


                    stages {
                        stage('AUT1') {
                            steps {
                                checkoutBranch()

                                script {
                                    currentBuild.displayName = "#${BUILD_NUMBER}-${SERVER}-${Branch}"

                                    catchError(message: 'AUT1 failed, we continue on', buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                                        withCredentials([usernamePassword(credentialsId: 'a7bd4bb9-0aae-482b-a677-234702b86313', usernameVariable: 'J_USER', passwordVariable: 'J_USER_PASSWD')]) {
                                            sh '''
                                                UID=$(id -u jenkins)
                                                GID=$(id -g jenkins)
                                                docker run --rm \
                                                    -v $PWD:/aut \
                                                    -v /dev/shm:/dev/shm \
                                                    -w /aut \
                                                    --network=host \
                                                    --name cypress-chrome-${BUILD_NUMBER} \
                                                    -t $DockerRegistry:5000/cypress-chrome:$Chrome \
                                                    bash -c "rm -fr node_modules/ pnpm-lock.yaml cypress/out/TCM-*/ cypress/out/caseIntake/TCM-*; usermod -u $UID jenkins; groupmod -g $GID jenkins; su -c \\"pnpm install --loglevel silent; npx cypress run -b chrome --config baseUrl=https://$Server.legalmatch.com --env portal=${QAPortalServerPage}/stream?key=,buildNumber=build-${BUILD_NUMBER},machine=aut1,selectedScript=,environment=$Server,jiraUpdate=true,jiraEmail=$J_USER,jiraToken=$J_USER_PASSWD \
                                                    -s \\"cypress/integration/tests/caseIntake/TCM-5955.js,cypress/integration/tests/caseIntake/TCM-5999.js,cypress/integration/tests/caseIntake/TCM-6004.js,cypress/integration/tests/caseIntake/TCM-6078.js,cypress/integration/tests/caseIntake/TCM-6270.js\\"\\" jenkins"
                                                containerId=$(docker ps -a -q --filter "name=cypress-chrome-$1" --format="{{.ID}}")
                                                if [ ${#containerId} -gt 0 ]
                                                then
                                                    docker rm $(docker stop $containerId)
                                                    echo "Removed docker container ID $containerId"
                                                else
                                                    echo "No docker container to remove"
                                                fi
                                            
                                            '''
                                        }
                                    }
                                }
                            }
                        }

                        stage("AUT1 Upload") {
                            steps{
                                uploadArtifacts()
                            }
                        }
                    }
                }
                 stage("Execute Automation 2") {
                     agent {label "aut2"}

                     stages{
                         stage('AUT2') {
                             steps{
                                 checkoutBranch()

                                 script {
                                     catchError(message: 'AUT2 failed, we continue on', buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                                         withCredentials([usernamePassword(credentialsId: 'a7bd4bb9-0aae-482b-a677-234702b86313', usernameVariable: 'J_USER', passwordVariable: 'J_USER_PASSWD')]) {
                                             sh '''
                                                 UID=$(id -u jenkins)
                                                 GID=$(id -g jenkins)
                                                 docker run --rm \
                                                     -v $PWD:/aut \
                                                     -v /dev/shm:/dev/shm \
                                                     -w /aut \
                                                     --network=host \
                                                     --name cypress-chrome-${BUILD_NUMBER} \
                                                     -t $DockerRegistry:5000/cypress-chrome:$Chrome \
                                                     bash -c "rm -fr node_modules/ pnpm-lock.yaml cypress/out/TCM-*/ cypress/out/attorneyCreation/TCM-*/ cypress/out/login/TCM-*/ cypress/out/attorneyUpload/TCM-*; usermod -u $UID jenkins; groupmod -g $GID jenkins; su -c \\"pnpm install --loglevel silent; npx cypress run -b chrome --config baseUrl=https://$Server.legalmatch.com --env portal=${QAPortalServerPage}/stream?key=,buildNumber=build-${BUILD_NUMBER},machine=aut2,selectedScript=,environment=$Server,jiraUpdate=true,jiraEmail=$J_USER,jiraToken=$J_USER_PASSWD \
                                                     -s \\"cypress/integration/tests/attorneyCreation/TCM-6076.js,cypress/integration/tests/login/TCM-6157.js,cypress/integration/tests/attorneyUpload/TCM-5958.js,cypress/integration/tests/attorneyUpload/TCM-6135.js,cypress/integration/tests/attorneyUpload/TCM-6158.js,cypress/integration/tests/attorneyUpload/TCM-6248.js,cypress/integration/tests/attorneyUpload/TCM-6557.js,cypress/integration/tests/attorneyUpload/TCM-6299.js,cypress/integration/tests/attorneyUpload/TCM-6264.js\\"\\" jenkins"
                                                 containerId=$(docker ps -a -q --filter "name=cypress-chrome-$1" --format="{{.ID}}")
                                                 if [ ${#containerId} -gt 0 ]
                                                 then
                                                     docker rm $(docker stop $containerId)
                                                     echo "Removed docker container ID $containerId"
                                                 else
                                                     echo "No docker container to remove"
                                                 fi
                                            
                                             '''
                                         }
                                     }
                                 }
                             }
                         }

                         stage("AUT2 Upload") {
                             steps{
                                 uploadArtifacts()
                             }
                         }
                     }
                 }

                 stage("Execute Automation 3") {
                     agent {label "aut3"}

                     stages{
                         stage('AUT3') {
                             steps {
                                 checkoutBranch()

                                 script {
                                     catchError(message: 'AUT3 failed, we continue on', buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                                         withCredentials([usernamePassword(credentialsId: 'a7bd4bb9-0aae-482b-a677-234702b86313', usernameVariable: 'J_USER', passwordVariable: 'J_USER_PASSWD')]) {
                                             sh '''
                                                 UID=$(id -u jenkins)
                                                 GID=$(id -g jenkins)
                                                 docker run --rm \
                                                     -v $PWD:/aut \
                                                     -v /dev/shm:/dev/shm \
                                                     -w /aut \
                                                     --network=host \
                                                     --name cypress-chrome-${BUILD_NUMBER} \
                                                     -t $DockerRegistry:5000/cypress-chrome:$Chrome \
                                                     bash -c "rm -fr node_modules/ pnpm-lock.yaml cypress/out/TCM-*/ cypress/out/client/TCM-*; usermod -u $UID jenkins; groupmod -g $GID jenkins; su -c \\"pnpm install --loglevel silent; npx cypress run -b chrome --config baseUrl=https://$Server.legalmatch.com --env portal=${QAPortalServerPage}/stream?key=,buildNumber=build-${BUILD_NUMBER},machine=aut3,selectedScript=,environment=$Server,jiraUpdate=true,jiraEmail=$J_USER,jiraToken=$J_USER_PASSWD \
                                                     -s \\"cypress/integration/tests/client/TCM-5935.js,cypress/integration/tests/client/TCM-5942.js,cypress/integration/tests/client/TCM-5990.js,cypress/integration/tests/client/TCM-6016.js,cypress/integration/tests/client/TCM-6108.js,cypress/integration/tests/client/TCM-6132.js\\"\\" jenkins"
                                                 containerId=$(docker ps -a -q --filter "name=cypress-chrome-$1" --format="{{.ID}}")
                                                 if [ ${#containerId} -gt 0 ]
                                                 then
                                                     docker rm $(docker stop $containerId)
                                                     echo "Removed docker container ID $containerId"
                                                 else
                                                     echo "No docker container to remove"
                                                 fi
                                            
                                             '''
                                         }
                                     }
                                 }
                             }
                         }
                        stage("AUT3 Upload") {
                            steps{
                                uploadArtifacts()
                            }
                        }
                    }
                }
                 stage("Execute Automation 4") {
                     agent {label "aut4"}

                     stages{
                         stage('AUT4') {
                             steps{
                                 checkoutBranch()

                                 script {
                                     catchError(message: 'AUT4 failed, we continue on', buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                                         withCredentials([usernamePassword(credentialsId: 'a7bd4bb9-0aae-482b-a677-234702b86313', usernameVariable: 'J_USER', passwordVariable: 'J_USER_PASSWD')]) {
                                             sh '''
                                                 UID=$(id -u jenkins)
                                                 GID=$(id -g jenkins)
                                                 docker run --rm \
                                                     -v $PWD:/aut \
                                                     -v /dev/shm:/dev/shm \
                                                     -w /aut \
                                                     --network=host \
                                                     --name cypress-chrome-${BUILD_NUMBER} \
                                                     -t $DockerRegistry:5000/cypress-chrome:$Chrome \
                                                     bash -c "rm -fr node_modules/ pnpm-lock.yaml cypress/out/TCM-*/ cypress/out/rebrandedPages/TCM-*; usermod -u $UID jenkins; groupmod -g $GID jenkins; su -c \\"pnpm install --loglevel silent; npx cypress run -b chrome --config baseUrl=https://$Server.legalmatch.com --env portal=${QAPortalServerPage}/stream?key=,buildNumber=build-${BUILD_NUMBER},machine=aut4,selectedScript=,environment=$Server,jiraUpdate=true,jiraEmail=$J_USER,jiraToken=$J_USER_PASSWD \
                                                     -s \\"cypress/integration/tests/rebrandedPages/TCM-5884.js,cypress/integration/tests/rebrandedPages/TCM-5886.js,cypress/integration/tests/rebrandedPages/TCM-6380.js,cypress/integration/tests/rebrandedPages/TCM-6387.js,cypress/integration/tests/rebrandedPages/TCM-6408.js,cypress/integration/tests/rebrandedPages/TCM-6449.js,cypress/integration/tests/rebrandedPages/TCM-6452.js,cypress/integration/tests/rebrandedPages/TCM-6521.js\\"\\" jenkins"
                                                 containerId=$(docker ps -a -q --filter "name=cypress-chrome-$1" --format="{{.ID}}")
                                                 if [ ${#containerId} -gt 0 ]
                                                 then
                                                     docker rm $(docker stop $containerId)
                                                     echo "Removed docker container ID $containerId"
                                                 else
                                                     echo "No docker container to remove"
                                                 fi
                                            
                                             '''
                                         }
                                     }
                                 }
                             }
                         }
                         stage("AUT4 Upload") {
                             steps{
                                 uploadArtifacts()
                             }
                         }
                     }
                 }
            }
        }
    }

    post {
        success {
            echo "All builds completed OK"
        }

        failure {
            echo "A job failed"
        }
    }
}

def checkoutBranch() {
    git branch: '$Branch',
        credentialsId: 'c9589bda-7190-4f83-9eaf-5e16bab8b533',
        url: 'https://bitbucket.org/legalmatch/lm-test-automation.git'
}

def uploadArtifacts() {
    ftpPublisher alwaysPublishFromMaster: false,
        continueOnError: false,
        failOnError: false,
        masterNodeName: '',
        paramPublish: null,
        publishers: [[configName: 'aut5', transfers: [[asciiMode: false, cleanRemote: false, excludes: '', flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, removePrefix: 'cypress/out/tests/', sourceFiles: '**/cypress/out/tests/**/build-${BUILD_NUMBER}*']], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: true]]
}
